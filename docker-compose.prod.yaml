version: "3.9"

services:
  db:
    image: postgres:16-alpine
    container_name: db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    # For production, it's safer NOT to publish the DB port.
    # If you really want host access (psql, etc.), uncomment the next two lines.
    # ports:
    #   - "${DB_PORT}:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 10

  backend:
    build:
      context: ./backend
      target: prod          # uses the prod stage in backend/Dockerfile
    container_name: backend
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${BACKEND_PORT}
      DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
    # Keep the API internal; Nginx proxies to it.
    expose:
      - "${BACKEND_PORT}"
    # If you insist on direct host access to the API, uncomment:
    # ports:
    #   - "${BACKEND_PORT}:${BACKEND_PORT}"

  frontend:
    build:
      context: ./frontend
      target: prod          # builds app then serves via Nginx
    container_name: frontend
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT}:80"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro

volumes:
  dbdata:
